<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.19" xml:lang="en-US">
  <compounddef id="_vrekrer__scpi__parser_8cpp" kind="file" language="C++">
    <compoundname>Vrekrer_scpi_parser.cpp</compoundname>
    <includes refid="_vrekrer__scpi__parser_8h" local="yes">Vrekrer_scpi_parser.h</includes>
    <includes local="yes">Arduino.h</includes>
    <incdepgraph>
      <node id="2">
        <label>Vrekrer_scpi_parser.h</label>
        <link refid="_vrekrer__scpi__parser_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="1">
        <label>AD7766_Arduino/Vrekrer_scpi_parser.cpp</label>
        <link refid="_vrekrer__scpi__parser_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Vrekrer_scpi_parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Arduino.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SCPI_String_Array<sp/>member<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="class_s_c_p_i___string___array_1ac590e8f3275c0e14a9df1a3bdb4cbdab" kindref="member">SCPI_String_Array::SCPI_String_Array</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="class_s_c_p_i___string___array_1a56b85135e4bb27864a1955c5a020b372" kindref="member">SCPI_String_Array::~SCPI_String_Array</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_s_c_p_i___string___array_1af838aa0cd5fc8937ed58599a1ab2e9cd" kindref="member">SCPI_String_Array::operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_[index];</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_c_p_i___string___array_1ac3ea456c13206c08abe997a47e36579c" kindref="member">SCPI_String_Array::Append</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref><sp/>&lt;<sp/>SCPI_ARRAY_SYZE)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>values_[<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref>]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref>++;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_s_c_p_i___string___array_1adea7e540495974035cc2f4fed122e979" kindref="member">SCPI_String_Array::Pop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref>--;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_[<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref>];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_s_c_p_i___string___array_1aec158b60997a7b3d6899ef00f3aaa135" kindref="member">SCPI_String_Array::First</ref>()<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_[0];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_s_c_p_i___string___array_1a50751e9f768863d884dbfa6681e1bbe7" kindref="member">SCPI_String_Array::Last</ref>()<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_[<ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">uint8_t<sp/><ref refid="class_s_c_p_i___string___array_1a80153f2aab64f399edb2db2b4fc8fc1f" kindref="member">SCPI_String_Array::Size</ref>()<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_s_c_p_i___string___array_1a4fd461e0c8a5333b3eb1211874af61a9" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SCPI_Commands<sp/>member<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="class_s_c_p_i___commands_1a300bc362ffe9fbdd6a76489c7924e84b" kindref="member">SCPI_Commands::SCPI_Commands</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="class_s_c_p_i___commands_1a300bc362ffe9fbdd6a76489c7924e84b" kindref="member">SCPI_Commands::SCPI_Commands</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trim<sp/>leading<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*token))<sp/>token++;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>parameters<sp/>and<sp/>multicommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___commands_1a985b6f9fc38d290d0589438e596c0d57" kindref="member">not_processed_message</ref><sp/>=<sp/>strpbrk(token,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___commands_1a985b6f9fc38d290d0589438e596c0d57" kindref="member">not_processed_message</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___commands_1a985b6f9fc38d290d0589438e596c0d57" kindref="member">not_processed_message</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok(token,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok(token,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok(token,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strip<sp/>using<sp/>&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(token<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_s_c_p_i___string___array_1ac3ea456c13206c08abe997a47e36579c" kindref="member">Append</ref>(token);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>token<sp/>=<sp/>strtok(NULL,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SCPI_Parameters<sp/>member<sp/>functions</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight><highlight class="normal"><ref refid="class_s_c_p_i___parameters_1ae0e631f22d962c9d9973b78bf471f2a4" kindref="member">SCPI_Parameters::SCPI_Parameters</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="class_s_c_p_i___parameters_1ae0e631f22d962c9d9973b78bf471f2a4" kindref="member">SCPI_Parameters::SCPI_Parameters</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>parameter<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Discard<sp/>parameters<sp/>and<sp/>multicommands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parameters_1a4f61bf9ac392d3a66a886db4df42db4a" kindref="member">not_processed_message</ref><sp/>=<sp/>strpbrk(parameter,<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___parameters_1a4f61bf9ac392d3a66a886db4df42db4a" kindref="member">not_processed_message</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parameters_1a4f61bf9ac392d3a66a886db4df42db4a" kindref="member">not_processed_message</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>strtok(parameter,<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>strtok(parameter,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>strtok(parameter,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Strip<sp/>using<sp/>&apos;:&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parameter<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(isspace(*parameter))<sp/>parameter++;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_s_c_p_i___string___array_1ac3ea456c13206c08abe997a47e36579c" kindref="member">Append</ref>(parameter);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>strtok(NULL,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>add<sp/>support<sp/>for<sp/>strings<sp/>parameters.<sp/>Please<sp/>elaborate<sp/>on<sp/>this<sp/>TODO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//SCPI_Registered_Commands<sp/>member<sp/>functions.<sp/>Why<sp/>is<sp/>there<sp/>no<sp/>constructor<sp/>for<sp/>the<sp/>SCPI<sp/>parser?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_c_p_i___parser_1ab3110f0075f29af0fac8e9e99e58bf22" kindref="member">SCPI_Parser::AddToken</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>token_size<sp/>=<sp/>strlen(token);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isQuery<sp/>=<sp/>(token[token_size<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isQuery)<sp/>token_size--;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allready_added<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>allready_added<sp/>^=<sp/>(strncmp(token,<sp/><ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[i],<sp/>token_size)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allready_added)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref><sp/>&lt;<sp/>SCPI_MAX_TOKENS)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*stored_token<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>[token_size<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(stored_token,<sp/>token,<sp/>token_size);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stored_token[token_size]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[<ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>]<sp/>=<sp/>stored_token;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>++;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">uint32_t<sp/><ref refid="class_s_c_p_i___parser_1a80eb1ab408f07a9bc28298d95f3c3710" kindref="member">SCPI_Parser::GetCommandCode</ref>(<ref refid="class_s_c_p_i___commands" kindref="compound">SCPI_Commands</ref>&amp;<sp/>commands)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/><ref refid="class_s_c_p_i___parser_1af7d35ab7afd81bce9cb6ee1b3a604d2f" kindref="member">tree_code_</ref><sp/>-<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>tree_code<sp/>=<sp/>1<sp/>when<sp/>execute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isQuery<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>commands.<ref refid="class_s_c_p_i___string___array_1a80153f2aab64f399edb2db2b4fc8fc1f" kindref="member">Size</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>*=<sp/>SCPI_MAX_TOKENS;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>header_length<sp/>=<sp/>strlen(commands[i]);<sp/><sp/></highlight><highlight class="comment">//header&apos;s<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>commands.<ref refid="class_s_c_p_i___string___array_1a80153f2aab64f399edb2db2b4fc8fc1f" kindref="member">Size</ref>()<sp/>-<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//Last<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isQuery<sp/>=<sp/>(commands[i][header_length<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isQuery)<sp/>header_length--;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isToken;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>short_length<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//short<sp/>token&apos;s<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isupper(<ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[j][short_length]))<sp/>short_length++;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>long_length<sp/>=<sp/>strlen(<ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[j]);<sp/></highlight><highlight class="comment">//long<sp/>token&apos;s<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[j][long_length<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">//Numeric<sp/>suffix<sp/>capable<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(commands[i][header_length<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long_length--;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isdigit(commands[i][header_length<sp/>-<sp/>1]))<sp/>header_length--;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isToken<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_length<sp/>==<sp/>short_length)<sp/>{<sp/></highlight><highlight class="comment">//match<sp/>with<sp/>short<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>k<sp/><sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>short_length;<sp/>k++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isToken<sp/>&amp;=<sp/>(toupper(commands[i][k])<sp/>==<sp/><ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[j][k]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(header_length<sp/>==<sp/>long_length)<sp/>{<sp/></highlight><highlight class="comment">//match<sp/>with<sp/>long<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>k<sp/><sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>long_length;<sp/>k++)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isToken<sp/>&amp;=<sp/>(toupper(commands[i][k])<sp/>==<sp/>toupper(<ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[j][k]));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isToken<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isToken)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>+=<sp/>j;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isToken)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isQuery)<sp/>code<sp/>^=<sp/>0x80000000;<sp/></highlight><highlight class="comment">//<sp/>what<sp/>is<sp/>this<sp/>mask<sp/>for?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code+1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_c_p_i___parser_1acec496d6937a23f681dcea60f36f16c8" kindref="member">SCPI_Parser::SetCommandTreeBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper*<sp/>tree_base)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>strcpy_P(msg_buffer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>tree_base);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1acec496d6937a23f681dcea60f36f16c8" kindref="member">SetCommandTreeBase</ref>(msg_buffer);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_c_p_i___parser_1acec496d6937a23f681dcea60f36f16c8" kindref="member">SCPI_Parser::SetCommandTreeBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tree_base)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(tree_base)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___commands" kindref="compound">SCPI_Commands</ref><sp/>tree_tokens(tree_base);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tree_tokens.Size();<sp/>i++)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1ab3110f0075f29af0fac8e9e99e58bf22" kindref="member">AddToken</ref>(tree_tokens[i]);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parser_1af7d35ab7afd81bce9cb6ee1b3a604d2f" kindref="member">tree_code_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parser_1af7d35ab7afd81bce9cb6ee1b3a604d2f" kindref="member">tree_code_</ref><sp/>=<sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1a80eb1ab408f07a9bc28298d95f3c3710" kindref="member">GetCommandCode</ref>(tree_tokens);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_s_c_p_i___parser_1af7d35ab7afd81bce9cb6ee1b3a604d2f" kindref="member">tree_code_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SCPI_Parser::RegisterCommand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper*<sp/>command,<sp/>SCPI_caller_t<sp/>caller)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>strcpy_P(msg_buffer,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>command);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>this-&gt;RegisterCommand(msg_buffer,<sp/>caller);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SCPI_Parser::RegisterCommand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>command,<sp/>SCPI_caller_t<sp/>caller)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___commands" kindref="compound">SCPI_Commands</ref><sp/>command_tokens(command);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>command_tokens.Size();<sp/>i++)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1ab3110f0075f29af0fac8e9e99e58bf22" kindref="member">AddToken</ref>(command_tokens[i]);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1a80eb1ab408f07a9bc28298d95f3c3710" kindref="member">GetCommandCode</ref>(command_tokens);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parser_1a1b784f3d0ae5aa1078d8be8895f135be" kindref="member">valid_codes_</ref>[<ref refid="class_s_c_p_i___parser_1ac836f5571f1c3c6c7887b80bd050de77" kindref="member">codes_size_</ref>]<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parser_1a98edc4489648395279570f99263677ac" kindref="member">callers_</ref>[<ref refid="class_s_c_p_i___parser_1ac836f5571f1c3c6c7887b80bd050de77" kindref="member">codes_size_</ref>]<sp/>=<sp/>caller;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parser_1ac836f5571f1c3c6c7887b80bd050de77" kindref="member">codes_size_</ref>++;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SCPI_Parser::Execute(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message,<sp/>Stream<sp/>&amp;interface)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parser_1af7d35ab7afd81bce9cb6ee1b3a604d2f" kindref="member">tree_code_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___commands" kindref="compound">SCPI_Commands</ref><sp/>commands(message);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="class_s_c_p_i___parameters" kindref="compound">SCPI_Parameters</ref><sp/>parameters(commands.<ref refid="class_s_c_p_i___commands_1a985b6f9fc38d290d0589438e596c0d57" kindref="member">not_processed_message</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/>this-&gt;<ref refid="class_s_c_p_i___parser_1a80eb1ab408f07a9bc28298d95f3c3710" kindref="member">GetCommandCode</ref>(commands);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_s_c_p_i___parser_1ac836f5571f1c3c6c7887b80bd050de77" kindref="member">codes_size_</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_s_c_p_i___parser_1a1b784f3d0ae5aa1078d8be8895f135be" kindref="member">valid_codes_</ref>[i]<sp/>==<sp/>code)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*<ref refid="class_s_c_p_i___parser_1a98edc4489648395279570f99263677ac" kindref="member">callers_</ref>[i])(commands,<sp/>parameters,<sp/>interface);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SCPI_Parser::GetMessage(Stream&amp;<sp/>interface,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>term_chars)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>uint8_t<sp/>msg_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>msg_buffer[msg_counter]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>continous_data<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>last_data_millis<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interface.available())<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continous_data<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_data_millis<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_buffer[msg_counter]<sp/>=<sp/><sp/>interface.read();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>check<sp/>msg_counter<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++msg_counter;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_buffer[msg_counter]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(msg_buffer,<sp/>term_chars)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg_buffer[msg_counter<sp/>-<sp/>strlen(term_chars)]<sp/>=<sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//No<sp/>chars<sp/>aviable<sp/>jet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((millis()<sp/>-<sp/>last_data_millis)<sp/>&gt;<sp/>10)<sp/></highlight><highlight class="comment">//<sp/>10<sp/>ms<sp/>without<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continous_data<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(continous_data);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(continous_data)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg_buffer;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SCPI_Parser::ProcessInput(Stream&amp;<sp/>interface,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>term_chars)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message<sp/>=<sp/>this-&gt;GetMessage(interface,<sp/>term_chars);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;Execute(message,<sp/>interface);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SCPI_Parser::PrintDebugInfo()<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;***<sp/>DEBUG<sp/>INFO<sp/>***&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;TOKENS<sp/>:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>Serial.println(<ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_s_c_p_i___parser_1a26fa50abbfcad4a5df6bf46833ea62a1" kindref="member">tokens_size_</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(String(<ref refid="class_s_c_p_i___parser_1a5a055bdf0075d8848b6133194924faa0" kindref="member">tokens_</ref>[i]));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;VALID<sp/>CODES<sp/>:&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_s_c_p_i___parser_1ac836f5571f1c3c6c7887b80bd050de77" kindref="member">codes_size_</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(<ref refid="class_s_c_p_i___parser_1a1b784f3d0ae5aa1078d8be8895f135be" kindref="member">valid_codes_</ref>[i]);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.flush();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>Serial.println(F(</highlight><highlight class="stringliteral">&quot;*******************&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="AD7766_Arduino/Vrekrer_scpi_parser.cpp"/>
  </compounddef>
</doxygen>
